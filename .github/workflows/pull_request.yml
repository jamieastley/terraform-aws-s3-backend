name: "Pull Request"

on:
  pull_request:
    branches:
      - master

jobs:
  validate_main_module:
    name: "Validate module"
    runs-on: ubuntu-latest
    outputs:
      fmtOutcome: ${{ steps.fmt.outcome }}
      initOutcome: ${{ steps.init.outcome }}
      validateOutcome: ${{ steps.validate.outcome}}
      validateOutput: ${{ steps.validate.outputs.stdout}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  validate_example:
    name: "Validate example"
    defaults:
      run:
        working-directory: example
    runs-on: ubuntu-latest
    outputs:
      fmtOutcome: ${{ steps.fmt.outcome }}
      initOutcome: ${{ steps.init.outcome }}
      validateOutcome: ${{ steps.validate.outcome}}
      validateOutput: ${{ steps.validate.outputs.stdout}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  output_terraform_results:
    name: "Output Terraform results"
    runs-on: ubuntu-latest
    needs: [ validate_main_module, validate_example ]
    permissions:
      pull-requests: write
      issues: write
    steps:
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          MODULE_FMT: ${{ needs.validate_main_module.outputs.fmtOutcome }}
          MODULE_INIT: ${{ needs.validate_main_module.outputs.initOutcome }}
          MODULE_VALIDATE: ${{ needs.validate_main_module.outputs.validateOutcome }}
          MODULE_VALIDATE_OUTPUT: ${{ needs.validate_main_module.outputs.validateOutput }}
          EXAMPLE_FMT: ${{ needs.validate_example.outputs.fmtOutcome }}
          EXAMPLE_INIT: ${{ needs.validate_example.outputs.initOutcome }}
          EXAMPLE_VALIDATE: ${{ needs.validate_example.outputs.validateOutcome }}
          EXAMPLE_VALIDATE_OUTPUT: ${{ needs.validate_example.outputs.validateOutput }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const title = 'Terraform Results'
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(title)
            })

            // 2. Prepare format of the comment
            const output = `## ${title}
            
            ### Module
            #### Terraform fmt üñå\`${{ env.MODULE_FMT }}\`
            #### Terraform init ‚öôÔ∏è\`${{ env.MODULE_INIT }}\`
            #### Terraform validate ü§ñ\`${{ env.MODULE_VALIDATE }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ env.MODULE_VALIDATE_OUTPUT }}
            \`\`\`

            </details>
            
            ### Example 
            #### Terraform fmt üñå\`${{ env.EXAMPLE_FMT }}\`
            #### Terraform init ‚öôÔ∏è\`${{ env.EXAMPLE_INIT }}\`
            #### Terraform validate ü§ñ\`${{ env.EXAMPLE_VALIDATE }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ env.EXAMPLE_VALIDATE_OUTPUT }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }